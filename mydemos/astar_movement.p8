pico-8 cartridge // http://www.pico-8.com
version 18
__lua__

-- a simple movement demo for a-star
-- a* -- < this shows important components
function _init()
 pal_switch = false
 if pal_switch then
  poke(0x5f2e,1)
  for i=3,16 do
   pal(i, 128+i, 1)
  end
 end
 
 cam_x = 0
 cam_y = 0

 nsprite = 2
 nx = 1
 ny = 1
 dnx = 0.7/8
 dny = 0.7/8
 anim_time = 0

 -- a* --
 -- id's used by astar
 wallid = 1
 rough_terrain_id = 2

 -- other id's
 waterid = 3
 npcid = 4
 
 start = {1,1}
 goal = getspecialtile(waterid)
 path = astar(start, goal)
 path_index = 1
 
 math_e = 2.71828
end

function _update()
 update_game()
end

function _draw()
 cls()
 mapdraw()
 spr(nsprite, nx*8, ny*8)
end

function update_game()
 -- speed state
 local new_dnx = 0
 local new_dny = 0
 if #path+1 > path_index then
  tx = path[path_index][1]
  ty = path[path_index][2]
  new_dnx = dnx*ceil(tx-nx)
  new_dny = dny*ceil(ty-ny)
  if flr(nx) == tx and flr(ny) == ty then
   path_index += 1
  end
 end
 nx += new_dnx
 ny += new_dny
 
 -- animation state
 if new_dnx > 0 or new_dny > 0 then
  anim_time += 1
  if anim_time%6 == 0 then
   anim_time = 0
   if nsprite == 2 then
    nsprite = 3
   else
    nsprite = 2
   end
  end
 else
   nsprite = 18
 end
 
 if (btn(0) and cam_x > 0) then
  cam_x -= 1
 end
 if (btn(1) and cam_x < 895) then
  cam_x += 1
 end
 if (btn(2) and cam_y > 0) then
  cam_y -= 1
 end
 if (btn(3) and cam_y < 127) then
  cam_y += 1
 end
 camera(cam_x, cam_y) 
end

-- a* --
-- returns a path from start to goal
-- where start and goal are arbitrary map locations
-- if no path exists return nil
function astar(start, goal)
 found_goal = false
 frontier = {}
 insert(frontier, start, 0)
 came_from = {}
 came_from[vectoindex(start)] = nil
 cost_so_far = {}
 cost_so_far[vectoindex(start)] = 0

 -- a* --
 -- #frontier < 200 indicates max search space
 while (#frontier > 0 and #frontier < 200) do
  current = popend(frontier)

  if vectoindex(current) == vectoindex(goal) then
   found_goal = true
   break
  end

  local neighbours = getneighbours(current)

  for next in all(neighbours) do
   -- if next is rough terrain, add custom cost
   if fget(mget(next[1], next[2]), rough_terrain_id) then
    -- a* --
    -- change for a custom path cost
    terrain_cost = 2
   else
    terrain_cost = 1
   end 
   local nextindex = vectoindex(next)
   local new_cost = cost_so_far[vectoindex(current)] + 1 -- add extra costs here

   if (cost_so_far[nextindex] == nil) or (new_cost < cost_so_far[nextindex]) then
    cost_so_far[nextindex] = new_cost
    local priority = new_cost + heuristic(goal, next)
    insert(frontier, next, priority)
    came_from[nextindex] = current
   end 
  end
 end

 -- the important bit
 if found_goal then
  current = came_from[vectoindex(goal)]
  path = {}
  local cindex = vectoindex(current)
  local sindex = vectoindex(start)

  while cindex != sindex do
   add(path, current)
   current = came_from[cindex]
   cindex = vectoindex(current)
  end
  reverse(path)
  
  return path
 else
  return nil
 end
end

function heuristic(a, b)
 return abs(a[1] - b[1]) + abs(a[2] - b[2])
end

-- a* --
-- in case you want to modify the neighbour function
function getneighbours(pos)
 local neighbours={}
 local x = pos[1]
 local y = pos[2]
 -- todo --
 -- check if x < 15 makes any sense
 if x > 0 and (mget(x-1,y) != wallid) then
  add(neighbours,{x-1,y})
 end
 if x < 15 and (mget(x+1,y) != wallid) then
  add(neighbours,{x+1,y})
 end
 if y > 0 and (mget(x,y-1) != wallid) then
  add(neighbours,{x,y-1})
 end
 if y < 15 and (mget(x,y+1) != wallid) then
  add(neighbours,{x,y+1})
 end

 -- for making diagonals
 if (x+y) % 2 == 0 then
  reverse(neighbours)
 end
 return neighbours
end

function getspecialtile(tileid)
 for x=cam_x/8,(cam_x/8)+16 do
  for y=cam_y/8,(cam_y/8)+16 do
   if fget(mget(x,y), tileid) then
    return {x,y}
   end
  end
 end
end

function insert(t, val)
 for i=(#t+1),2,-1 do
  t[i] = t[i-1]
 end
 t[1] = val
end

function insert(t, val, p)
 if #t >= 1 then
  add(t, {})
  for i=(#t),2,-1 do
   local next = t[i-1]
   if p < next[2] then
    t[i] = {val, p}
    return
   else
    t[i] = next
   end
  end
  t[1] = {val, p}
 else
  add(t, {val, p}) 
 end
end

function popend(t)
 local top = t[#t]
 del(t,t[#t])
 return top[1]
end

function reverse(t)
 for i=1,(#t/2) do
  local temp = t[i]
  local oppindex = #t-(i-1)
  t[i] = t[oppindex]
  t[oppindex] = temp
 end
end

function vectoindex(vec)
 return ((vec[1]+1) * 128) + vec[2]
end

function sigmoid(x)
 return 1/(1+math_e^-x)
end
__gfx__
00000000ddd4dddd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000004444444d0006666000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
007007004dd444440069979000066660000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000455d444d0601999006699790000000066660000000000000000000000600000000000000000000000000000000000000000000000000000000000000
000770004555444d0001d11000019990000000666666000000000000000000066660000000000000000000000000000000000000000000000000000000000000
0070070044444dd4000111100001d110000066666666666000000000000000666666000000000000000000000000000000000000000000000000000000000000
00000000d444d5540000010000011110000666666666666660000000000066666666666000000000000000000000000000000000000000000000000000000000
00000000444455440000010000001010006655661656666566000000000666666666666660000000000000000000000000000000000000000000000000000000
bb33b33b666555560000000000000000006555666655666556000000006655661656666566000000000000000000000000000000000000000000000000000000
3133333b55cccc550066666000000000006600070656666656600000006555666655666556600000000000000000000000000000000000000000000000000000
b133313b65ccccc60097979000666660000000070666656655600000006600070656666656600000000000000000000000000000000000000000000000000000
b33331335cccccc50099999000979790000000070066556656000000000000070666656655600000000000000000000000000000000000000000000000000000
3b3311336cccccc500d111d000999990000000077065566556600000000000070066556656600000000000000000000000000000000000000000000000000000
3313133b6ccccc550011111000d111d0000000007006666666600000000000077065566556600000000000000000000000000000000000000000000000000000
3b13b33b55cccc560001010000111110000000000006666655000000000000007006666666000000000000000000000000000000000000000000000000000000
bb3bb33b656555560001010000010100000000000066600666000000000000000006666655000000000000000000000000000000000000000000000000000000
3b3b3b3b3333b33b0000000000000000000000000056600065000000000000000056600666000000000000000000000000000000000000000000000000000000
ba3b3b333133333b0066666000000000000000000056000065000000000000000056600065000000000000000000000000000000000000000000000000000000
bb3b3a33b133313b0099699000666660000000000056000066000000000000000055600065000000000000000000000000000000000000000000000000000000
33bb33b3b33331330099699000996990000000000666000666000000000000000666600666000000000000000000000000000000000000000000000000000000
b3bbb3bb3333b3330011111000999990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
333bb33b3313b33b0011111000111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
33abbb3b3313b33b0001010000111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
b3b3bb3bb333b33b0001010000010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0001080800000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0101010101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
012020202020200100001b1b1b1b1b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0120202020202001001b1b1b1b1b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
01202021202020011b1b1b1b1b1b1b1b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
01202110212020011b1b351b1b1b1b1b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
01211011102120010000451b1b1b1b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
012121102121200100000000001b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0120212120202001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0120202020202020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
