pico-8 cartridge // http://www.pico-8.com
version 18
__lua__
function _init()
 poke(0x5f2d, 1)
 left_press = false
 hold = false
 units = {}
 enemies = {}
 add_unit(40, 40, 1, true)
 add_unit(60, 60, 1, true)
 add_unit(80, 80, 1, true)
 cam_x = 0
 cam_y = 0
 mxo = 0
 myo = 0
 friendlyid = 1
 enemyid = 2
end

function _update()
 -- cls for collision layer
 cls()
 mx = stat(32)
 my = stat(33)
 mp = stat(34)

 move_camera()

 if mp == 2 then
  right_press = true
 end

 for unit in all(units) do
  unit:colbox()
 end

 friendly_selected = false
 for unit in all(units) do
  unit:update()
  if unit.selected then
   friendly_selected = true
  end
 end

 for enmy in all(enemies) do
  enmy:update()
 end
end

function _draw()
 -- cls for drawing
 cls(1)
 map()

 for unit in all(units) do
  unit:draw()
 end

 for enmy in all(enemies) do
  enmy:draw()
 end


 if mp == 1 then
  left_press = true
 else
  left_press = false
 end

 right_press = false

 if left_press then
  if not(hold) then
   holdx = mx
   holdy = my
   hold = true
  else
   rect(holdx, holdy, mx, my, 11)
  end
 else
  hold = false
 end


 spr(0, mx-3, my)
 print("mem:"..stat(0), cam_x, cam_y, 7)
 print("cpu:"..stat(1), cam_x, cam_y+8, 7)
 print("cpu2:"..stat(2), cam_x, cam_y+16, 7)
end

function move_camera()
 if mp == 4 then
  if not(mid_hold) then
   mid_hold = true
   hmx = mx
   hmy = my
  end
  cam_x += (hmx - mx)
  cam_y += (hmy - my)
  hmx = mx
  hmy = my
 else
  mid_hold = false
  if mx > 116 then
   cam_x += 1
  end
  if my > 116 then
   cam_y += 1
  end
  if mx < 18 then
   cam_x -= 1
  end
  if my < 18 then
   cam_y -= 1
  end
 end
 camera(cam_x, cam_y)
 mx = mx + cam_x
 my = my + cam_y
end

-->8

function add_unit(x, y, unit_number, isfriendly)
 -- global traits
 local x = x or 63
 local y = y or 63
 local unit_number = unit_number or 1
 local isfriendly = isfriendly or true

 local size
 local anim_states
 local dx
 local dy
 local hp
 local id

 -- unit traits
 if unit_number == 1 then
  anim_states = {7, 8}
  anim_speed = 12
  size = 6
  dx = 0.5
  dy = 0.5
  hp = 100
 elseif unit_number == 2 then
  anim_states = {9,10}
  anim_speed = 15
  size = 6
  dx = 0.7
  dy = 0.7
  hp = 100
 elseif unit_number == 3 then
  anim_states = {11,27}
  anim_speed = 9
  size = 6
  dx = 0.7
  dy = 0.7
  hp = 100
 end

 if isfriendly then
  id = 1
 else
  id = 2
 end

 add(units,{
  x=x,
  y=y,
  dx = dx,
  dy = dy,
  size=size,
  anim_speed = anim_speed,
  anim_states = anim_states,
  unit_number = unit_number,
  isfriendly = isfriendly,
  id = id,
  anim_time = 0,
  anim_index = 1,
  path_index,
  selected = false,
  right_clicked = false,
  goal = {},
  path = {},
  cooldown = 0,
  update = function(self)
   local x = flr(self.x)
   local y = flr(self.y)
   local size = self.size

   -- friendly unit control
   if self.isfriendly then
    -- astar cooldown
    local cdn = self.cooldown

    -- middle of sprite
    local midx = x+(size/2)
    local midy = y+(size/2)

    -- left click selection
    if left_press then
     if mid(holdx, midx, mx) == midx and mid(holdy, midy, my) == midy then
      self.selected = true
     else
      self.selected = false
     end
     if mid(x, mx, x+size) == mx  and mid(y, my, y+size) == my then
      self.selected = true
     end
    end

    -- move/attack command
    if right_press and cdn < 1 then
     if self.selected then
      local gx = snap_mouse(x, mx)
      local gy = snap_mouse(y, my)
      local path = astar({x, y}, {gx, gy}, self.size)
      if path == nil then
       self.path = {}
      else
       self.path = path
       self.path_index = 1
      end
     end
     self.cooldown = 20
    end

    -- merge with other unit, rules for merging are in the merge() function
    for other in all(units) do
      dist = abs(other.x - x) + abs(other.y - y)
      printh("dist: "..dist)
      -- TODO: check if other is right clicked
      if dist < 10 and other != self and other.isfriendly then
        merge(self, other)
      end
    end

    -- update cooldown
    if cdn > 0 then
     self.cooldown -= 1
    end

    -- follow path
    local x = self.x
    local y = self.y
    local path = self.path
    if #path > 0 then
     t = path[1]
     if abs(t[1] - x) < self.dx*3 and abs(t[2] - y) < self.dy*3 then
      del(path, path[1])
     end
     local dx = sgn(t[1] - x)*self.dx
     local dy = sgn(t[2] - y)*self.dy
     if not(pget(midx + (1 + size/2)*sgn(dx), y) == friendlyid) then
      self.x += dx
     end
     if not(pget(x, midy + (1 + size/2)*sgn(dx)) == friendlyid) then
      self.y += dy
     end
    end

   -- enemy unit control
   else
   end
  end,

  colbox = function(self)
   local x = self.x
   local y = self.y
   local size = self.size
   rectfill(x, y, size+x, size+y, self.id)
  end,

  draw = function(self)
   local anim_time = self.anim_time
   if anim_time%self.anim_speed == 0 then
    if self.sprite == self.anim_states[1] then
     self.sprite = self.anim_states[2]
    else
     self.sprite = self.anim_states[1]
    end
    self.anim_time = 0
   end
   self.anim_time += 1
   spr(self.sprite, self.x, self.y)
   if self.selected then
    spr(16, self.x, self.y)
   end
  end})
end


-->8

-- a* --
-- returns a path from start to goal
-- where start and goal are arbitrary map locations
-- if no path exists return nil
function astar(start, goal, size)
 found_goal = false
 frontier = {}
 insert(frontier, start, 0)
 came_from = {}
 came_from[vectoindex(start)] = nil
 cost_so_far = {}
 cost_so_far[vectoindex(start)] = 0

 -- a* --
 -- #frontier < n indicates max search space
 while (#frontier > 0 and #frontier < 200) do
  current = popend(frontier)

  if vectoindex(current) == vectoindex(goal) then
   found_goal = true
   break
  end

  local neighbours = getneighbours(current, size)

  for next in all(neighbours) do
   local nextindex = vectoindex(next)
   local new_cost = cost_so_far[vectoindex(current)] + 1 -- add extra costs here

   if (cost_so_far[nextindex] == nil) or (new_cost < cost_so_far[nextindex]) then
    cost_so_far[nextindex] = new_cost
    local priority = new_cost + heuristic(start, goal, next)
    insert(frontier, next, priority)
    came_from[nextindex] = current
   end
  end
 end

 -- the important bit
 if found_goal then
  current = came_from[vectoindex(goal)]
  path = {}
  local cindex = vectoindex(current)
  local sindex = vectoindex(start)

  while cindex != sindex do
   add(path, current)
   current = came_from[cindex]
   cindex = vectoindex(current)
  end
  reverse(path)

  return path
 else
  return nil
 end
end

function heuristic(start, a, b)
 local b1 = b[1]
 local b2 = b[2]
 local a1 = a[1]
 local a2 = a[2]
 local dx1 = a1 - b1
 local dy1 = a2 - b2
 local dx2 = start[1] - b1
 local dy2 = start[2] - b2
 return abs(dx1*dy2 - dx2 * dy1)*0.001 + (abs(a1 - b1) + abs(a2 - b2))
end

-- a* --
-- in case you want to modify the neighbour function
function getneighbours(pos, size)
 local neighbours={}
 local x = pos[1]
 local y = pos[2]

 if not(fget(mget((x-2)/8,y/8), wallid)) then
  -- mset((x-2)/8,y/8, 48)
  add(neighbours,{x-2,y})
 end
 if not(fget(mget((x+size)/8,y/8), wallid)) then
  -- mset((x+size)/8,y/8, 48)
  add(neighbours,{x+2,y})
 end
 if not(fget(mget(x/8,(y-2)/8), wallid)) then
  -- mset(x/8,(y-2)/8, 48)
  add(neighbours,{x,y-2})
 end
 if not(fget(mget(x/8,(y+size)/8), wallid)) then
  -- mset(x/8,(y+size)/8, 48)
  add(neighbours,{x,y+2})
 end
 -- for making diagonals
 if (x+y) % 2 == 0 then
  reverse(neighbours)
 end
 return neighbours
end

-- Merge two units
function merge(unit, other)
 if unit.unit_number == 1 and other.unit_number == 1 then
  -- RULE 1: Merge 1 and 1 into 2
  new_type = unit.unit_number + other.unit_number
  del(units, unit)
  del(units, other)
  add_unit(unit.x, unit.y, new_type, true)
 elseif unit.unit_number == 2 and other.unit_number == 1 then
  -- RULE 2: Merge 2 and 1 into 3
  new_type = unit.unit_number + other.unit_number
  del(units, unit)
  del(units, other)
  add_unit(unit.x, unit.y, new_type, true)
 end
end

function insert(t, val)
 for i=(#t+1),2,-1 do
  t[i] = t[i-1]
 end
 t[1] = val
end

function insert(t, val, p)
 if #t >= 1 then
  add(t, {})
  for i=(#t),2,-1 do
   local next = t[i-1]
   if p < next[2] then
    t[i] = {val, p}
    return
   else
    t[i] = next
   end
  end
  t[1] = {val, p}
 else
  add(t, {val, p})
 end
end

function popend(t)
 local top = t[#t]
 del(t,t[#t])
 return top[1]
end

function reverse(t)
 for i=1,(#t/2) do
  local temp = t[i]
  local oppindex = #t-(i-1)
  t[i] = t[oppindex]
  t[oppindex] = temp
 end
end

function vectoindex(vec)
 return ((vec[1]+1) * 512) + vec[2]
end

function snap_mouse(c, mc)
 if (c-mc)%2 == 0 then
  return mc
 else
  return mc+1
 end
end
-->8

function add_bullet()

end
__gfx__
00010000000010000000000000000007000001b000000000000900000000000000000000000000000000000000ccc00000000000000000000000000000000000
001c10000011b1100000b000000010c1001111b10000000000000099000ccc00000000000100001010ccc0010c7dd7c000000000000000000000000000000000
0171710000100010000101000011b0c101bbbbb1009000000000009a00cc1c20000ccc000c0cc0c00c7dd7c00ce22e00000ee000000ee0000000000000000000
1c777c1001b070b10010701001bbbcc101bccc11000a099090aa000000ceec2000cc1c200c7dd7000ce22e0000cc2c000000e000000e00000000000000000000
c71717c0001000100b07070b1bbccc1001b77c100988aa900aaaaa000ccccc0000ceec200ce22e0000cc2c000c0000c0000ee00ccccce0000000000000000000
77c1c7700011b110011111111b0c110011bbbc100a8a8aa0a88faa9000c000000ccccc000ccc2cc000c00c00cc0000cc000eecccccccc000000eeee000ee0000
1c101c1000001000000010001b0100001ccccc1099888a9998a899900000000000000000cc0000cc0cc00cc0c100001c000eccccc1cccc0000e0eeeccccce000
010001000000000000000000700000000c111100099a9999088899000000000000000000110000110110011010000001000cccc11ccc2c0000e00cccc1ccc000
bb0000bb0000000000000000000000000000000000000000000000000000000000000000000000000000000001000010000eccccccc222c00000cccccccccc00
b000000b000000000000000000000000000000000000000000000000000000000000000000000000000000001c0000c100cceeccccccccc0000cccc11ccc2c00
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cc0000cc00cceeccdddcccc0000cccccccc222c0
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c000000c00cccccddddddc0000ceccccccccccc0
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0ccc0c0000ccccddddddc0000cceeccccccccc0
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c7dd7c0000cccdddddddc000ccceecccddccc00
b000000b000000000000000000000000000000000000000000000000000000000000000000000000000000000ce22e00000ccccccccccc00ccccccdddddddcc0
bb0000bb0000000000000000000000000000000000000000000000000000000000000000000000000000000000cc2c00000c001111000c00ccc1cdddddddddcc
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d000100000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ddd0011100000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000dddd01111000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d0ddddd111100000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ddccdd3c1100000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d0dddcddc3332200000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d0cddddc3773200000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000dddd3cd3c3d3200000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011c3cd3cc3020000ddddd3c110000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011c3c3c3002000ddd1dddc3c33322
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001113c3c0000000001ddddd3c37732
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011100000000000dddddddcd3cc3d32
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111000001000000011ddcddc3c3302
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111100000001111ddc3c3c0020
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111100000000111013c3c000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111000000
66666666666666665555555555555555000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66666666666666665555555555555555000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66666666666646665555f55544ff5555000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
646666444666466655544f54444ff555000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
666666464666444655554455444f5555000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66666644466666665555555544445555000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66666666666666665555555555455555000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6666666666666666555fff5555555555000000000000005000000000000000000000000000000000000000000000000000000000000000000000000000000000
666666666666466655444f555ffff555000000000005555000000000000000000000000000000000000000000000000000000000000000000000000000000000
6644446666664666554444544444f555000550000005555500000000000000000000000000000000000000000000000000000000000000000000000000000000
66466666664446665554455444444555005555500055555500000000000000000000000000000000000000000000000000000000000000000000000000000000
66466666666666665555555544445555005555555555555500000000000000000000000000000000000000000000000000000000000000000000000000000000
664666646666666655554f5554455555005555555555555500000000000000000000000000000000000000000000000000000000000000000000000000000000
6666666666666666555444f555555555000555555555555000000000000000000000000000000000000000000000000000000000000000000000000000000000
66666666666666665555545555555555000055000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66666666666666665555555555555555000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
dddddddddddddddd2222222222e22222000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
dddd111ddddddddd2ddee22222222e22000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
dddddddddddddddd2dddeee2d2222222000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
dddddddddd2ddddd22ddeee222222222000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
ddddddddd2d2dddd22ddddd22dee2222000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
ddddddddd12111dd22e2dd22dddeee22000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
dddd2ddddddddddd22222222ddddee22000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
ddd2d2dddddddddd2d22222dddddd22e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
dd1121ddddddd111222e22dddd222222000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
dddddddddddddddd2222e2222222de22000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
dddddddddd2ddddd222deeeee222dde2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
ddddddddd2d2dddd222dddddee22dde2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
dddddddd11211ddde2222ddddd2dddd2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
dddddddddd22f22d222222ddd22dddd2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
111ddddddddddddd222e222dd2d22dd2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
dddddddddddddddd2222222222222e22000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
