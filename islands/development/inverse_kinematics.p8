pico-8 cartridge // http://www.pico-8.com
version 18
__lua__

function interpolate(ox, oy, tx, dt, maxt, kind)
 -- dt = current_time / target_time
 if kind == nil then
  return {(tx - ox) * dt, (ty - oy) * dt}
 end

end

-- default functions
function _init()
 -- gametime
 gt = 0
 anim_time = 0

 -- leg targets
 local ox, oy = 60, 42
 targetx, targety = 60, 60

 local alen = 16
 local clen = 16


 left  = make_leg(ox, oy, alen, clen)
 right = make_leg(ox, oy, alen, clen)
 left.tx = targetx
 left.ty = targety
 left.tx = targetx-10
 left.ty = targety

 prev_lx = left.ox
 prev_rx = right.ox
end

function _update()
 cls()
 -- update gametime
 gt += 1


 local dx = 0
 local dy = 0
 if btn(0) then
  dx -= 1
 end
 if btn(1) then
  dx += 1
 end
 if btn(2) then
  dy -= 1
 end
 if btn(3) then
  dy += 1
 end

 if btn(4) then
  left.ox += dx
  left.oy += dy
 else
  local tx = left.tx + dx
  local ty = left.ty + dy
  -- left:move_to(tx, ty, 0.5)
 end

 if abs(dx) > 0 then
  anim_time += 1

  -- calc left movement
  local lx_offset = 12*sin(anim_time/30)
  local lx = left.ox + lx_offset - 2
  local dlx = prev_lx - lx
  prev_lx = lx
  local ly = left.oy + 24 + 5*cos(anim_time/30)

  -- calc right movement
  local rx_offset = 12*sin((anim_time+15)/30)
  local rx = right.ox + rx_offset - 2
  local drx = prev_rx - rx
  prev_rx = rx
  local ry = right.oy + 24 + 5*cos((anim_time+15)/30)

  -- move feet
  left:move_to(lx, ly, 1.0)
  right:move_to(rx, ry, 1.0)

  -- grounded foot moves the body
  local x_offset = 0
  if left.grounded and sgn(dx) == sgn(dlx) then
   x_offset = dlx
  elseif right.grounded and sgn(dx) == sgn(drx) then
   x_offset = drx
  end

  -- move body
  print(x_offset)
  prev_lx = lx
  prev_rx = rx
  left.ox += flr(dx*2)
  right.ox+= flr(dx*2)
 end

 left:update()
 right:update()
end

function _draw()
 map()
 left:draw()
 right:draw()
end

-->8
function make_leg(ox, oy, alen, clen)
 
 local leg = {}

 -- origin
 leg.ox = ox
 leg.oy = oy

 -- default target
 leg.tx = ox-alen
 leg.ty = oy-alen

 -- default position
 leg.cx = ox
 leg.cy = oy-clen
 leg.bx = ox
 leg.by = leg.cy + alen

 -- general properties
 leg.front = true
 leg.grounded = false

 -- update inverse kinematics
 leg.update = function(self, interpolation)
  -- will the interpolation?
  interpolation = 0

  -- origin and target
  local ox, oy, tx, ty = self.ox, self.oy, self.tx, self.ty
  blen = distance(ox, oy, tx, ty)

  local ja = 0
  local jb = 0
  local cx = 0
  local cy = 0
  local bx = 0
  local by = 0
  local offset = 1
  
  -- target outside of range
  if blen > alen+clen then
   ja = handangle(ox, oy, tx, ty)
   jb = ja
   offset = -1
  -- target inside inner bound
  else
   ja = jointa(alen, blen, clen, ox, oy, tx, ty)
   jb = ja-jointb(alen, blen, clen)
  end

  self.cx = ox-clen*sin(ja)
  self.cy = oy-clen*cos(ja)
  self.bx = self.cx+alen*sin(jb)*offset
  self.by = self.cy+alen*cos(jb)*offset
 end

 -- linear movement
 leg.move_to = function(self, tx, ty, speed)
  if speed == nil then
   self.tx = tx
   self.ty = ty
  else
   local currentx = self.tx
   local currenty = self.ty

   local dx = tx - currentx
   local dy = ty - currenty

   local stepx = dx*speed
   local stepy = dx*speed
   
   if abs(dx) > speed*1.1 and not fget(mget((currentx + stepx)/8, currenty/8), 0) then
    self.tx += dx
   end
   
   self.grounded = false
   if not fget(mget(currentx/8, (currenty + dy)/8), 0) then
    if abs(dy) > speed*1.1 then
     self.ty += dy
    end
   else
    self.grounded = true
   end
  end
 end

 -- draw
 leg.draw = function(self)
  local cx, cy = self.cx, self.cy
  line(cx, cy, self.bx, self.by, 7)
  line(self.ox, self.oy, cx, cy, 10)
 end

 return leg
end

-->8
-- math
function acos(x)
 return atan2(x,-sqrt(1-x*x))
end

function asin(x)
 return atan2(sqrt(1-x*x),-x)
end

function distance(x0, y0, x1, y1)
 local dx = x0 - x1
 local dy = y0 - y1
 
 return sqrt(dx*dx+dy*dy)
end

function alpha(a, b, c)
 return asin((b*b + c*c - a*a)/(2*b*c))
end

function jointb(a, b, c)
 return acos((a*a + c*c - b*b)/(2*a*c))
end

function handangle(cx, cy, ax, ay)
 return atan2(cy - ay, cx - ax)
end

function jointa(a, b, c, cx, cy, ax, ay)
 local a = alpha(a, b, c)
 local da = handangle(cx, cy, ax, ay)-0.25
 return a + da
end



__gfx__
44444440eeeeeeee0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
fcffcf40eeeeeeee0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
ffffff40eeeeeeee0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
09999440eeeeeeee0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
09999040eeeeeeee0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0e00e000eeeeeeee0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000eeeeeeee0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000eeeeeeee0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
